// Code generated by entc, DO NOT EDIT.

package ent

import (
	"Corewar_Api/ent/champ"
	"Corewar_Api/ent/predicate"
	"context"
	"fmt"
	"sync"

	"entgo.io/ent"
	"github.com/google/uuid"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeChamp = "Champ"
)

// ChampMutation represents an operation that mutates the Champ nodes in the graph.
type ChampMutation struct {
	config
	op                   Op
	typ                  string
	id                   *uuid.UUID
	name                 *string
	_path                *string
	number_of_victory    *int
	addnumber_of_victory *int
	number_of_defeats    *int
	addnumber_of_defeats *int
	clearedFields        map[string]struct{}
	done                 bool
	oldValue             func(context.Context) (*Champ, error)
	predicates           []predicate.Champ
}

var _ ent.Mutation = (*ChampMutation)(nil)

// champOption allows management of the mutation configuration using functional options.
type champOption func(*ChampMutation)

// newChampMutation creates new mutation for the Champ entity.
func newChampMutation(c config, op Op, opts ...champOption) *ChampMutation {
	m := &ChampMutation{
		config:        c,
		op:            op,
		typ:           TypeChamp,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withChampID sets the ID field of the mutation.
func withChampID(id uuid.UUID) champOption {
	return func(m *ChampMutation) {
		var (
			err   error
			once  sync.Once
			value *Champ
		)
		m.oldValue = func(ctx context.Context) (*Champ, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Champ.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withChamp sets the old Champ of the mutation.
func withChamp(node *Champ) champOption {
	return func(m *ChampMutation) {
		m.oldValue = func(context.Context) (*Champ, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ChampMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ChampMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Champ entities.
func (m *ChampMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID
// is only available if it was provided to the builder.
func (m *ChampMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetName sets the "name" field.
func (m *ChampMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *ChampMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Champ entity.
// If the Champ object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChampMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *ChampMutation) ResetName() {
	m.name = nil
}

// SetPath sets the "path" field.
func (m *ChampMutation) SetPath(s string) {
	m._path = &s
}

// Path returns the value of the "path" field in the mutation.
func (m *ChampMutation) Path() (r string, exists bool) {
	v := m._path
	if v == nil {
		return
	}
	return *v, true
}

// OldPath returns the old "path" field's value of the Champ entity.
// If the Champ object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChampMutation) OldPath(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPath is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPath requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPath: %w", err)
	}
	return oldValue.Path, nil
}

// ResetPath resets all changes to the "path" field.
func (m *ChampMutation) ResetPath() {
	m._path = nil
}

// SetNumberOfVictory sets the "number_of_victory" field.
func (m *ChampMutation) SetNumberOfVictory(i int) {
	m.number_of_victory = &i
	m.addnumber_of_victory = nil
}

// NumberOfVictory returns the value of the "number_of_victory" field in the mutation.
func (m *ChampMutation) NumberOfVictory() (r int, exists bool) {
	v := m.number_of_victory
	if v == nil {
		return
	}
	return *v, true
}

// OldNumberOfVictory returns the old "number_of_victory" field's value of the Champ entity.
// If the Champ object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChampMutation) OldNumberOfVictory(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldNumberOfVictory is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldNumberOfVictory requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNumberOfVictory: %w", err)
	}
	return oldValue.NumberOfVictory, nil
}

// AddNumberOfVictory adds i to the "number_of_victory" field.
func (m *ChampMutation) AddNumberOfVictory(i int) {
	if m.addnumber_of_victory != nil {
		*m.addnumber_of_victory += i
	} else {
		m.addnumber_of_victory = &i
	}
}

// AddedNumberOfVictory returns the value that was added to the "number_of_victory" field in this mutation.
func (m *ChampMutation) AddedNumberOfVictory() (r int, exists bool) {
	v := m.addnumber_of_victory
	if v == nil {
		return
	}
	return *v, true
}

// ResetNumberOfVictory resets all changes to the "number_of_victory" field.
func (m *ChampMutation) ResetNumberOfVictory() {
	m.number_of_victory = nil
	m.addnumber_of_victory = nil
}

// SetNumberOfDefeats sets the "number_of_defeats" field.
func (m *ChampMutation) SetNumberOfDefeats(i int) {
	m.number_of_defeats = &i
	m.addnumber_of_defeats = nil
}

// NumberOfDefeats returns the value of the "number_of_defeats" field in the mutation.
func (m *ChampMutation) NumberOfDefeats() (r int, exists bool) {
	v := m.number_of_defeats
	if v == nil {
		return
	}
	return *v, true
}

// OldNumberOfDefeats returns the old "number_of_defeats" field's value of the Champ entity.
// If the Champ object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChampMutation) OldNumberOfDefeats(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldNumberOfDefeats is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldNumberOfDefeats requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNumberOfDefeats: %w", err)
	}
	return oldValue.NumberOfDefeats, nil
}

// AddNumberOfDefeats adds i to the "number_of_defeats" field.
func (m *ChampMutation) AddNumberOfDefeats(i int) {
	if m.addnumber_of_defeats != nil {
		*m.addnumber_of_defeats += i
	} else {
		m.addnumber_of_defeats = &i
	}
}

// AddedNumberOfDefeats returns the value that was added to the "number_of_defeats" field in this mutation.
func (m *ChampMutation) AddedNumberOfDefeats() (r int, exists bool) {
	v := m.addnumber_of_defeats
	if v == nil {
		return
	}
	return *v, true
}

// ResetNumberOfDefeats resets all changes to the "number_of_defeats" field.
func (m *ChampMutation) ResetNumberOfDefeats() {
	m.number_of_defeats = nil
	m.addnumber_of_defeats = nil
}

// Op returns the operation name.
func (m *ChampMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Champ).
func (m *ChampMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ChampMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.name != nil {
		fields = append(fields, champ.FieldName)
	}
	if m._path != nil {
		fields = append(fields, champ.FieldPath)
	}
	if m.number_of_victory != nil {
		fields = append(fields, champ.FieldNumberOfVictory)
	}
	if m.number_of_defeats != nil {
		fields = append(fields, champ.FieldNumberOfDefeats)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ChampMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case champ.FieldName:
		return m.Name()
	case champ.FieldPath:
		return m.Path()
	case champ.FieldNumberOfVictory:
		return m.NumberOfVictory()
	case champ.FieldNumberOfDefeats:
		return m.NumberOfDefeats()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ChampMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case champ.FieldName:
		return m.OldName(ctx)
	case champ.FieldPath:
		return m.OldPath(ctx)
	case champ.FieldNumberOfVictory:
		return m.OldNumberOfVictory(ctx)
	case champ.FieldNumberOfDefeats:
		return m.OldNumberOfDefeats(ctx)
	}
	return nil, fmt.Errorf("unknown Champ field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ChampMutation) SetField(name string, value ent.Value) error {
	switch name {
	case champ.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case champ.FieldPath:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPath(v)
		return nil
	case champ.FieldNumberOfVictory:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNumberOfVictory(v)
		return nil
	case champ.FieldNumberOfDefeats:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNumberOfDefeats(v)
		return nil
	}
	return fmt.Errorf("unknown Champ field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ChampMutation) AddedFields() []string {
	var fields []string
	if m.addnumber_of_victory != nil {
		fields = append(fields, champ.FieldNumberOfVictory)
	}
	if m.addnumber_of_defeats != nil {
		fields = append(fields, champ.FieldNumberOfDefeats)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ChampMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case champ.FieldNumberOfVictory:
		return m.AddedNumberOfVictory()
	case champ.FieldNumberOfDefeats:
		return m.AddedNumberOfDefeats()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ChampMutation) AddField(name string, value ent.Value) error {
	switch name {
	case champ.FieldNumberOfVictory:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddNumberOfVictory(v)
		return nil
	case champ.FieldNumberOfDefeats:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddNumberOfDefeats(v)
		return nil
	}
	return fmt.Errorf("unknown Champ numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ChampMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ChampMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ChampMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Champ nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ChampMutation) ResetField(name string) error {
	switch name {
	case champ.FieldName:
		m.ResetName()
		return nil
	case champ.FieldPath:
		m.ResetPath()
		return nil
	case champ.FieldNumberOfVictory:
		m.ResetNumberOfVictory()
		return nil
	case champ.FieldNumberOfDefeats:
		m.ResetNumberOfDefeats()
		return nil
	}
	return fmt.Errorf("unknown Champ field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ChampMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ChampMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ChampMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ChampMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ChampMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ChampMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ChampMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Champ unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ChampMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Champ edge %s", name)
}
