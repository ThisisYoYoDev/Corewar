// Code generated by entc, DO NOT EDIT.

package ent

import (
	"Corewar_Api/ent/champ"
	"Corewar_Api/ent/predicate"
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ChampUpdate is the builder for updating Champ entities.
type ChampUpdate struct {
	config
	hooks    []Hook
	mutation *ChampMutation
}

// Where adds a new predicate for the ChampUpdate builder.
func (cu *ChampUpdate) Where(ps ...predicate.Champ) *ChampUpdate {
	cu.mutation.predicates = append(cu.mutation.predicates, ps...)
	return cu
}

// SetName sets the "name" field.
func (cu *ChampUpdate) SetName(s string) *ChampUpdate {
	cu.mutation.SetName(s)
	return cu
}

// SetPath sets the "path" field.
func (cu *ChampUpdate) SetPath(s string) *ChampUpdate {
	cu.mutation.SetPath(s)
	return cu
}

// SetNumberOfVictory sets the "number_of_victory" field.
func (cu *ChampUpdate) SetNumberOfVictory(i int) *ChampUpdate {
	cu.mutation.ResetNumberOfVictory()
	cu.mutation.SetNumberOfVictory(i)
	return cu
}

// SetNillableNumberOfVictory sets the "number_of_victory" field if the given value is not nil.
func (cu *ChampUpdate) SetNillableNumberOfVictory(i *int) *ChampUpdate {
	if i != nil {
		cu.SetNumberOfVictory(*i)
	}
	return cu
}

// AddNumberOfVictory adds i to the "number_of_victory" field.
func (cu *ChampUpdate) AddNumberOfVictory(i int) *ChampUpdate {
	cu.mutation.AddNumberOfVictory(i)
	return cu
}

// SetNumberOfDefeats sets the "number_of_defeats" field.
func (cu *ChampUpdate) SetNumberOfDefeats(i int) *ChampUpdate {
	cu.mutation.ResetNumberOfDefeats()
	cu.mutation.SetNumberOfDefeats(i)
	return cu
}

// SetNillableNumberOfDefeats sets the "number_of_defeats" field if the given value is not nil.
func (cu *ChampUpdate) SetNillableNumberOfDefeats(i *int) *ChampUpdate {
	if i != nil {
		cu.SetNumberOfDefeats(*i)
	}
	return cu
}

// AddNumberOfDefeats adds i to the "number_of_defeats" field.
func (cu *ChampUpdate) AddNumberOfDefeats(i int) *ChampUpdate {
	cu.mutation.AddNumberOfDefeats(i)
	return cu
}

// Mutation returns the ChampMutation object of the builder.
func (cu *ChampUpdate) Mutation() *ChampMutation {
	return cu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *ChampUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(cu.hooks) == 0 {
		if err = cu.check(); err != nil {
			return 0, err
		}
		affected, err = cu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ChampMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cu.check(); err != nil {
				return 0, err
			}
			cu.mutation = mutation
			affected, err = cu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(cu.hooks) - 1; i >= 0; i-- {
			mut = cu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (cu *ChampUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *ChampUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *ChampUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cu *ChampUpdate) check() error {
	if v, ok := cu.mutation.Name(); ok {
		if err := champ.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	if v, ok := cu.mutation.Path(); ok {
		if err := champ.PathValidator(v); err != nil {
			return &ValidationError{Name: "path", err: fmt.Errorf("ent: validator failed for field \"path\": %w", err)}
		}
	}
	if v, ok := cu.mutation.NumberOfVictory(); ok {
		if err := champ.NumberOfVictoryValidator(v); err != nil {
			return &ValidationError{Name: "number_of_victory", err: fmt.Errorf("ent: validator failed for field \"number_of_victory\": %w", err)}
		}
	}
	if v, ok := cu.mutation.NumberOfDefeats(); ok {
		if err := champ.NumberOfDefeatsValidator(v); err != nil {
			return &ValidationError{Name: "number_of_defeats", err: fmt.Errorf("ent: validator failed for field \"number_of_defeats\": %w", err)}
		}
	}
	return nil
}

func (cu *ChampUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   champ.Table,
			Columns: champ.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: champ.FieldID,
			},
		},
	}
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: champ.FieldName,
		})
	}
	if value, ok := cu.mutation.Path(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: champ.FieldPath,
		})
	}
	if value, ok := cu.mutation.NumberOfVictory(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: champ.FieldNumberOfVictory,
		})
	}
	if value, ok := cu.mutation.AddedNumberOfVictory(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: champ.FieldNumberOfVictory,
		})
	}
	if value, ok := cu.mutation.NumberOfDefeats(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: champ.FieldNumberOfDefeats,
		})
	}
	if value, ok := cu.mutation.AddedNumberOfDefeats(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: champ.FieldNumberOfDefeats,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{champ.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// ChampUpdateOne is the builder for updating a single Champ entity.
type ChampUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ChampMutation
}

// SetName sets the "name" field.
func (cuo *ChampUpdateOne) SetName(s string) *ChampUpdateOne {
	cuo.mutation.SetName(s)
	return cuo
}

// SetPath sets the "path" field.
func (cuo *ChampUpdateOne) SetPath(s string) *ChampUpdateOne {
	cuo.mutation.SetPath(s)
	return cuo
}

// SetNumberOfVictory sets the "number_of_victory" field.
func (cuo *ChampUpdateOne) SetNumberOfVictory(i int) *ChampUpdateOne {
	cuo.mutation.ResetNumberOfVictory()
	cuo.mutation.SetNumberOfVictory(i)
	return cuo
}

// SetNillableNumberOfVictory sets the "number_of_victory" field if the given value is not nil.
func (cuo *ChampUpdateOne) SetNillableNumberOfVictory(i *int) *ChampUpdateOne {
	if i != nil {
		cuo.SetNumberOfVictory(*i)
	}
	return cuo
}

// AddNumberOfVictory adds i to the "number_of_victory" field.
func (cuo *ChampUpdateOne) AddNumberOfVictory(i int) *ChampUpdateOne {
	cuo.mutation.AddNumberOfVictory(i)
	return cuo
}

// SetNumberOfDefeats sets the "number_of_defeats" field.
func (cuo *ChampUpdateOne) SetNumberOfDefeats(i int) *ChampUpdateOne {
	cuo.mutation.ResetNumberOfDefeats()
	cuo.mutation.SetNumberOfDefeats(i)
	return cuo
}

// SetNillableNumberOfDefeats sets the "number_of_defeats" field if the given value is not nil.
func (cuo *ChampUpdateOne) SetNillableNumberOfDefeats(i *int) *ChampUpdateOne {
	if i != nil {
		cuo.SetNumberOfDefeats(*i)
	}
	return cuo
}

// AddNumberOfDefeats adds i to the "number_of_defeats" field.
func (cuo *ChampUpdateOne) AddNumberOfDefeats(i int) *ChampUpdateOne {
	cuo.mutation.AddNumberOfDefeats(i)
	return cuo
}

// Mutation returns the ChampMutation object of the builder.
func (cuo *ChampUpdateOne) Mutation() *ChampMutation {
	return cuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *ChampUpdateOne) Select(field string, fields ...string) *ChampUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Champ entity.
func (cuo *ChampUpdateOne) Save(ctx context.Context) (*Champ, error) {
	var (
		err  error
		node *Champ
	)
	if len(cuo.hooks) == 0 {
		if err = cuo.check(); err != nil {
			return nil, err
		}
		node, err = cuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ChampMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cuo.check(); err != nil {
				return nil, err
			}
			cuo.mutation = mutation
			node, err = cuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cuo.hooks) - 1; i >= 0; i-- {
			mut = cuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *ChampUpdateOne) SaveX(ctx context.Context) *Champ {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *ChampUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *ChampUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cuo *ChampUpdateOne) check() error {
	if v, ok := cuo.mutation.Name(); ok {
		if err := champ.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	if v, ok := cuo.mutation.Path(); ok {
		if err := champ.PathValidator(v); err != nil {
			return &ValidationError{Name: "path", err: fmt.Errorf("ent: validator failed for field \"path\": %w", err)}
		}
	}
	if v, ok := cuo.mutation.NumberOfVictory(); ok {
		if err := champ.NumberOfVictoryValidator(v); err != nil {
			return &ValidationError{Name: "number_of_victory", err: fmt.Errorf("ent: validator failed for field \"number_of_victory\": %w", err)}
		}
	}
	if v, ok := cuo.mutation.NumberOfDefeats(); ok {
		if err := champ.NumberOfDefeatsValidator(v); err != nil {
			return &ValidationError{Name: "number_of_defeats", err: fmt.Errorf("ent: validator failed for field \"number_of_defeats\": %w", err)}
		}
	}
	return nil
}

func (cuo *ChampUpdateOne) sqlSave(ctx context.Context) (_node *Champ, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   champ.Table,
			Columns: champ.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: champ.FieldID,
			},
		},
	}
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Champ.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, champ.FieldID)
		for _, f := range fields {
			if !champ.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != champ.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: champ.FieldName,
		})
	}
	if value, ok := cuo.mutation.Path(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: champ.FieldPath,
		})
	}
	if value, ok := cuo.mutation.NumberOfVictory(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: champ.FieldNumberOfVictory,
		})
	}
	if value, ok := cuo.mutation.AddedNumberOfVictory(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: champ.FieldNumberOfVictory,
		})
	}
	if value, ok := cuo.mutation.NumberOfDefeats(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: champ.FieldNumberOfDefeats,
		})
	}
	if value, ok := cuo.mutation.AddedNumberOfDefeats(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: champ.FieldNumberOfDefeats,
		})
	}
	_node = &Champ{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{champ.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
